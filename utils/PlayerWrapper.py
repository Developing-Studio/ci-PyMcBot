import asyncio
import time
from collections import deque

from cogs.ingame import Ingame
from utils.Player import Player


class PlayerWrapper(Player):
    def __init__(self, username, password, bot, guildId):
        """
        Setup both the Parent & self init's. This init sets
        up all required things for maintaining a discord bot cog
        and sending messages to said cog at regular intervals.

        Parameters
        ----------
        username : str
            The Username / Email used to login
        password : str
            The password used to login to the account
        bot : commands.Bot
            Our bot instance, required for creating an instance of a discord cog
        guildId : int
            The id this Player is associated with

        See Also
        --------
        pyCraft.Player.Player.__init__()
            Called internally to set username & password easily.
        """
        super().__init__(username, password)

        self.queue = deque()
        self.ingame_cog = Ingame(bot)

        self.bot = bot
        self.guild_id = guildId
        self.chat_breakout = False
        self.loop = asyncio.get_event_loop()
        self.ingame_cog.isPycraftInstance = True

    def SetServer(self, ip, port=25565, handler=None):
        """
        Override the parent SetServer so we can send chats to discord instead

        See Also
        --------
        pyCraft.Player.Player.SetServer()
            The parent class method we are overriding,
            but then calling within this method.
        """
        super().SetServer(ip, port=port, handler=self.ReceiveChat)

    def ReceiveChat(self, chat_packet):
        """
        Override the parent ReceiveChat functionality
        so we can send chats to discord instead

        See Also
        --------
        pyCraft.Player.Player.ReceiveChat()
            The parent class method we are overriding here.
        """
        message = self.Parser(chat_packet.json_data)
        if not message:
            # This means our Parser failed to extract the message
            return

        self.queue.append(message)

    def HandleChat(self):
        """Handles the queue and sends all relevant chats to discord every second

        This queries an internal queue of messages every second, taking up to
        5 messages per second to be processed before being passed off to a
        further method that handles the discord interaction.

        Notes
        -----
        This was built to avoid ratelimits and the need to sanitize output.

        In theory, this can maintain the flow of conversation generated by
        a minecraft chat while adhering to the ratelimits discord imposes.
        """
        while True:
            if self.chat_breakout:
                return

            time.sleep(1)
            messages = ""
            for i in range(5):
                try:
                    messages += f"{self.queue.popleft()}\n"
                except IndexError:
                    # Queue is empty but no worries
                    continue

            if messages != "":
                self.loop.create_task(
                    self.ingame_cog.SendChatToDiscord(self.bot, messages, self.guild_id)
                )
